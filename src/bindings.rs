// Generated by `wit-bindgen` 0.18.0. DO NOT EDIT!
pub mod exports {
  pub mod component {
    pub mod deleteme {
      
      #[allow(clippy::all)]
      pub mod bar {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        
        pub use super::super::super::super::super::R2 as R2;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "component:deleteme/bar#[dtor]r2"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<R2>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for R2{
          unsafe fn new(_rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:deleteme/bar")]
              extern "C" {
                #[link_name = "[resource-new]r2"]
                fn new(_: usize) -> u32;
              }
              new(_rep)
            }
          }
          
          unsafe fn rep(_handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:deleteme/bar")]
              extern "C" {
                #[link_name = "[resource-rep]r2"]
                fn rep(_: u32) -> usize;
              }
              rep(_handle)
            }
          }
        }
        pub type OwnR2 = wit_bindgen::rt::Resource<R2>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for R2{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:deleteme/bar")]
              extern "C" {
                #[link_name = "[resource-drop]r2"]
                fn drop(_: u32);
              }
              
              drop(_handle);
            }
          }
        }
        
        
      }
      
      
      #[allow(clippy::all)]
      pub mod foo {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type OwnR2 = super::super::super::super::exports::component::deleteme::bar::OwnR2;
        pub type R2 = super::super::super::super::exports::component::deleteme::bar::R2;
        
        pub use super::super::super::super::super::R1 as R1;
        const _: () = {
          #[doc(hidden)]
          #[export_name = "component:deleteme/foo#[dtor]r1"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn dtor(rep: usize) {
            wit_bindgen::rt::Resource::<R1>::dtor(rep)
          }
        };
        unsafe impl wit_bindgen::rt::RustResource for R1{
          unsafe fn new(_rep: usize) -> u32 {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:deleteme/foo")]
              extern "C" {
                #[link_name = "[resource-new]r1"]
                fn new(_: usize) -> u32;
              }
              new(_rep)
            }
          }
          
          unsafe fn rep(_handle: u32) -> usize {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:deleteme/foo")]
              extern "C" {
                #[link_name = "[resource-rep]r1"]
                fn rep(_: u32) -> usize;
              }
              rep(_handle)
            }
          }
        }
        pub type OwnR1 = wit_bindgen::rt::Resource<R1>;
        
        
        unsafe impl wit_bindgen::rt::WasmResource for R1{
          #[inline]
          unsafe fn drop(_handle: u32) {
            #[cfg(not(target_arch = "wasm32"))]
            unreachable!();
            
            #[cfg(target_arch = "wasm32")]
            {
              #[link(wasm_import_module = "[export]component:deleteme/foo")]
              extern "C" {
                #[link_name = "[resource-drop]r1"]
                fn drop(_: u32);
              }
              
              drop(_handle);
            }
          }
        }
        
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "component:deleteme/foo#[method]r1.my-func"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_method_r1_my_func(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_R1Impl as GuestR1>::my_func(wit_bindgen::rt::Resource::<R1>::lift_borrow(arg0 as u32 as usize), super::super::super::super::exports::component::deleteme::bar::OwnR2::from_handle(arg1 as u32));
          }
        };
        use super::super::super::super::super::R1 as _R1Impl;
        pub trait GuestR1 {
          fn my_func(&self,p1: OwnR2,);
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:example"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 300] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 175, 1, 1, 65, 2, 1, 65, 5, 1, 66, 1, 4, 0, 2, 114, 50, 3, 1, 4, 1, 22, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 100, 101, 108, 101, 116, 101, 109, 101, 47, 98, 97, 114, 5, 0, 2, 3, 0, 0, 2, 114, 50, 1, 66, 7, 2, 3, 2, 1, 1, 4, 0, 2, 114, 50, 3, 0, 0, 4, 0, 2, 114, 49, 3, 1, 1, 104, 2, 1, 105, 1, 1, 64, 2, 4, 115, 101, 108, 102, 3, 2, 112, 49, 4, 1, 0, 4, 0, 18, 91, 109, 101, 116, 104, 111, 100, 93, 114, 49, 46, 109, 121, 45, 102, 117, 110, 99, 1, 5, 4, 1, 22, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 100, 101, 108, 101, 116, 101, 109, 101, 47, 102, 111, 111, 5, 2, 4, 1, 26, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 100, 101, 108, 101, 116, 101, 109, 101, 47, 101, 120, 97, 109, 112, 108, 101, 4, 0, 11, 13, 1, 0, 7, 101, 120, 97, 109, 112, 108, 101, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 56, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
